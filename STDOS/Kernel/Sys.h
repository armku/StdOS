#ifndef _Sys_H_
#define _Sys_H_

#include <stdint.h>
#include <stdio.h>
#include <stddef.h>

#include "Core\Type.h"
#include "Core\Buffer.h"
#include "Core\Array.h"
#include "Core\ByteArray.h"
#include "Core\SString.h"
#include "Core\Stream.h"
#include "Core\DateTime.h"
#include "Core\Version.h"
#include "Core\List.h"
#include "Core\Dictionary.h"
#include "Core\Delegate.h"

/* 引脚定义 */
#include "Platform\Pin.h"

// 强迫内联
#define _force_inline __attribute__( ( always_inline ) ) __INLINE

extern "C"
{
#if defined(DEBUG)
	#define debug_printf SmartOS_printf
	extern int SmartOS_printf(const char *format, ...);
#else
	#define debug_printf(format, ...)
#endif
}

#ifdef DEBUG

void assert_failed2(cstring msg, cstring file, unsigned int line);
#define assert(expr, msg) ((expr) ? (void)0 : assert_failed2(msg, (const char*)__FILE__, __LINE__))

#else

#define assert(expr, msg) ((void)0)

#endif

// 关键性代码放到开头
#if !defined(TINY) && defined(USEROOT)
	#define INROOT __attribute__((section(".InRoot")))
#else
	#define INROOT
#endif

#if defined(BOOT) || defined(APP)
struct HandlerRemap
{
	Func pUserHandler;
	void* Reserved1;
	void* Reserved2;
	void* Reserved3;
};
extern struct HandlerRemap StrBoot;
#endif

class SystemConfig;

#include "Type.h"
#include "TTime.h"
#include "Delegate.h"
#include "SString.h"
#include "..\Platform\Pin.h"

/* 串口定义 */
typedef enum
{
    AIN = 0x0,  //模拟输入 
    INPUT = 0x04,  //输入
    INPUT_PD = 0x28,  //浮空输入
    INPUT_PU = 0x48,  //推挽式输入
    OUTPUT_OD = 0x14,  //开漏输出
    OUTPUT_PP = 0x10,  //推挽式输出
    AF_OD = 0x1C,  //开漏复用输出
    AF_PP = 0x18  //推挽复用输出
} PIN_MODE;
 
#define STM32F1    //使用STM32F1系列单片机
/* 针脚 ------------------------------------------------------------------*/
#ifdef DEBUG

void assert_failed2(cstring msg, cstring file, unsigned int line);
#define assert(expr, msg) ((expr) ? (void)0 : assert_failed2(msg, (const char*)__FILE__, __LINE__))

#else

#define assert(expr, msg) ((void)0)

#endif
// 使用何种模块的宏定义
#define using(module) Sys.module.Init = T##module##_Init;

#ifdef DEBUG
    #define debug_printf printf
#else 
    inline void debug_printf(const char *format, ...){}
#endif 

class TSys: public Object
{
    public:
        TSys(uint clock = 72000000, byte messagePort = COM1);
        void Init(); //初始化
        void Start(); //启动系统任务调度，该函数内部为死循环。
        void Stop();
        void StartInternal();
        virtual void Show(bool newLine = false)const;
        void ShowInfo(); //显示系统信息
        UInt64 Ms(); //系统启动以来的毫秒数，无符号长整型8字节
        uint Seconds(); //系统绝对UTC时间，整型4字节，Unix格式，1970年以来的总秒数。
        void Delay(uint us); //微妙级延迟，常用于高精度外设信号控制
        void Sleep(uint ms); //毫秒级睡眠，常用于业务层杂宁等待一定时间
        void Reboot(uint msDelay); //异步热重启系统。延迟一定毫秒数执行。		

        uint AddTask(Action func, void *param, long dueTime, long period, const char *name = "未命名任务");
        void SetTask(uint taskid,bool onoff,long delaytime=1); //设置任务参数
        void RemoveTask(uint taskid); //删除任务

        uint Clock; //系统时钟
        UInt64 StartTime; //系统启动时间
        ushort FlashSize;
        ushort RamSize;
        byte MessagePort; // 指定printf输出的串口
        byte Inited; //串口用参数
        byte ID[12];
        uint CPUID;
        ushort RevID;
        ushort DevID;
        byte _Index; //未知
        String *CPUName;
		char * Name;//名称
        ushort Crc16(const void *buf, uint len, ushort crc = 0); //crc 计算 软件实现
        uint Crc(const void *buf, uint len); //crc 硬件实现
        uint Crc(const void *buf, uint len, uint crc);
        void ShowHex(byte *data, byte hexlength);

    private:
        void Initjs(); //计算ram、型号等

};
extern TSys Sys; //系统参数

// 系统设置
class SystemConfig
{
public:
	// 操作系统
	uint	Ver;		// 系统版本。Version格式
	char	Name[16];	// 系统名称

	// 硬件
	uint	HardVer;	// 硬件版本

	// 应用软件
	ushort	Code;		// 产品种类
	uint	AppVer;		// 产品版本
	char	Company[16];// 公司
	char	Product[16];// 产品批次

	char	DevID[16];	// 设备编码
	char	Server[32];	// 服务器。重置后先尝试厂商前端，再尝试原服务器
	char	Token[32];	// 访问服务器的令牌

	uint	Expire;		// 有效期。1970以来的秒数。
	
	ushort	Checksum;	// 校验
};

void EnterCritical();
void ExitCritical();

//extern uint32_t __REV(uint32_t value);
//extern uint32_t __REV16(uint16_t value);

uint _REV(uint value);
ushort _REV16(ushort value);

// 智能IRQ，初始化时备份，销毁时还原
// SmartIRQ相当霸道，它直接关闭所有中断，再也没有别的任务可以跟当前任务争夺MCU
class SmartIRQ
{
public:
	SmartIRQ(bool enable = false);
	~SmartIRQ();

private:
	uint _state;
};
#if DEBUG
// 函数栈。
// 进入函数时压栈函数名，离开时弹出。便于异常时获取主线程调用列表
class TraceStack
{
public:
	TraceStack(cstring name);
	~TraceStack();

	static void Show();
};

#define TS(name) TraceStack __ts(name)

#else

#define TS(name) ((void)0)

#endif

// 编译信息兼容性处理
#ifndef __BUILD_DATE__
#define __BUILD_DATE__ 6289		// 2017-03-21
#endif
#ifndef __BUILD_TIME__
#define __BUILD_TIME__ 1490054400	// 2017-03-21 00:00:00
#endif
#ifndef __BUILD_SDATE__
#define __BUILD_SDATE__ "170321"
#endif
#ifndef __BUILD_STIME__
#define __BUILD_STIME__ "2017-03-21 00:00:00"
#endif
#ifndef __BUILD_USER__
#define __BUILD_USER__ "Computer_User"
#endif

#endif //_Sys_H_

/*
v3.2.2016.0517	核心类独立到目录Core，平台无关，系统无关

v3.1.2015.1108	增加系统配置存储模块，增加电源管理模块

v3.0.2015.0806	增强系统调度器，支持无阻塞多任务调度

v2.8.2014.0927	完成微网通讯架构，封装消息协议，串口及nRF24L01+测试通过
v2.7.2014.0919	支持抢占式多线程调度
v2.6.2014.0823	平台文件独立，接管系统初始化控制权
v2.5.2014.0819	增加堆栈溢出检测模块，重载new/delete实现，仅Debug有效
v2.4.2014.0811	实现系统多任务调度，一次性编译测试通过，多任务小灯例程4k
				实现以太网精简协议TinyIP，ARP/ICMP/TCP/UDP，混合网络例程7.5k
				增加看门狗、定时器模块
v2.3.2014.0806	使用双栈增加稳定性，增加RTM优化编译，核心函数强制内联，自动堆栈越界检查
v2.2.2014.0801	增加引脚保护机制，避免不同模块使用相同引脚导致冲突而难以发现错误
v2.1.2014.0728	增加中断管理模块，全面接管中断向量表，支持动态修改中断函数，支持多中断共用中断函数。F0需配置RAM从0x200000C0开始
v2.0.2014.0725	使用C++全新实现SmartOS，支持系统时钟、IO、USART、日志、断言、Spi、NRF24L01、SPIFlash、CAN、Enc28j60，GD32超频

v1.3.2014.0624	增加Spi模块和NRF24L01+模块的支持
v1.2.2014.0604	支持GD32芯片
v1.1.2014.0513	支持F0/F1的GPIO和串口功能
v1.0.2014.0506	建立嵌入式系统框架SmartOS，使用纯C语言实现
*/
